{"version":3,"sources":["SortButton.js","Table.js","ArrowButton.js","Panel.js","HomePage.js","App.js","serviceWorker.js","index.js"],"names":["SortButton","_this","this","react_default","a","createElement","className","id","props","onClick","sort","type","value","lastSort","xmlns","width","height","viewBox","transform","points","style","fill","Component","Table","src_SortButton","data","Object","keys","communities","map","header","Fragment","key","Math","random","name","cases","ArrowButton","toggle","open","cx","cy","r","stroke","strokeMiterlimit","x1","y1","x2","y2","Panel","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","d","objectSpread","state","typeCheck","b","localeCompare","setState","list","src_ArrowButton","hidePanel","float","marginBottom","fontWeight","length","src_Table","HomePage","togglePanel","panelActive","src_Panel","marginTop","App","src_HomePage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c074561.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass SortButton extends Component {\n  render() {\n    return (\n        <button className=\"SortButton\" id={this.props.id} onClick={() => this.props.sort(this.props.type)}>\n        {this.props.value}\n          {this.props.lastSort === this.props.type ? \n            <svg xmlns=\"http://www.w3.org/2000/svg\"  width=\"8\" height=\"8\" viewBox=\"0 0 4.5 3\">\n              <g transform=\"translate(0,3)\">\n                <g transform=\"scale(1,-1)\">\n                  <polygon points=\"2.25 3 0 0 4.5 0 2.25 3\" style={{fill:\"#5e68ad\"}}/>\n                </g>\n              </g>\n            </svg> \n          : \n            <svg xmlns=\"http://www.w3.org/2000/svg\"  width=\"8\" height=\"8\" viewBox=\"0 0 4.5 3\">\n              <g>\n                <polygon points=\"2.25 3 0 0 4.5 0 2.25 3\" style={{fill:\"#5e68ad\"}}/>\n              </g>\n            </svg> \n          }\n        </button>\n    );\n  }\n}\n\nexport default SortButton;\n\n","import React, { Component } from 'react';\nimport SortButton from './SortButton';\nimport './App.css';\n\nclass Table extends Component {\n\n  get headers() {\n    //getter for getting key set of initial value to determine correct headers.\n    //this allows for minor data agnosticism, but assumes all possible\n    //data points are present in each community data point\n    const headers = Object.keys(this.props.data.communities[0]);\n    return headers.map((header) => (<React.Fragment> <th className={header}>{header} <SortButton /> </th></React.Fragment>));\n  }\n\n  get data() {\n    return this.props.data.communities.map((data) => {\n      return (\n        <tr key={Math.random()}>\n          <td><b>{data.name}</b></td>\n          <td>{data.cases}</td>\n        </tr>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <table className=\"Table\">\n        <thead >\n          <tr className=\"header\">\n            <th className=\"sticky\" id=\"name\"><SortButton value={\"NAME \"} type={'name'} sort={this.props.sort} lastSort={this.props.lastSort}/></th>\n            <th className=\"sticky\" id=\"cases\"><SortButton id=\"column2\" type={'cases'} sort={this.props.sort} value={\"NUMBER OF CASES \"} lastSort={this.props.lastSort}/></th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.data}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass ArrowButton extends Component {\n  render() {\n    return (\n      <div className=\"ArrowButton\" style={this.props.style}>\n        <button onClick={this.props.toggle} >\n        {!this.props.open ?\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"31\" height=\"31\" viewBox=\"0 0 31 31\">\n            <g>\n              <circle cx=\"15.5\" cy=\"15.5\" r=\"15\" style={{fill:\"none\",stroke:\"#4b506d\",strokeMiterlimit:\"10\"}} />\n              <line x1=\"13.31\" y1=\"15.69\" x2=\"17.69\" y2=\"11.31\" style={{fill:\"none\",stroke:\"#4b506d\",strokeMiterlimit:\"10\"}} />\n              <line x1=\"13.31\" y1=\"15.31\" x2=\"17.69\" y2=\"19.69\" style={{fill:\"none\",stroke:\"#4b506d\",strokeMiterlimit:\"10\"}} />\n            </g>\n          </svg>\n          :\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"31\" height=\"31\" viewBox=\"0 0 31 31\">\n            <g transform=\"translate(31,0)\">\n            <g transform=\"scale(-1,1)\">\n              <circle cx=\"15.5\" cy=\"15.5\" r=\"15\" style={{fill:\"none\",stroke:\"#4b506d\",strokeMiterlimit:\"10\"}} />\n              <line x1=\"13.31\" y1=\"15.69\" x2=\"17.69\" y2=\"11.31\" style={{fill:\"none\",stroke:\"#4b506d\",strokeMiterlimit:\"10\"}} />\n              <line x1=\"13.31\" y1=\"15.31\" x2=\"17.69\" y2=\"19.69\" style={{fill:\"none\",stroke:\"#4b506d\",strokeMiterlimit:\"10\"}} />\n            </g>\n            </g>\n          </svg>\n        }\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ArrowButton;","import React, { Component } from 'react';\nimport list from './data.json';\nimport Table from './Table';\nimport ArrowButton from './ArrowButton';\nimport './App.css';\n\nclass Panel extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: list,\n      lastSort: null,\n    }\n  }\n\n  sort = (type) => {\n    let d = {...this.state.data};\n    let typeCheck = type;\n    d.communities.sort((a, b)=> {\n      if(typeof a[type] === 'string') {\n        //check for reverse sorting on second sort\n        if(type === this.state.lastSort) {\n          typeCheck = null;\n          return b[type].localeCompare(a[type]);\n        }\n        return a[type].localeCompare(b[type]);\n      } else {\n        if(type === this.state.lastSort) {\n          typeCheck = null;\n          return b[type]- a[type];\n        }\n        return a[type] - b[type];\n      }\n    });\n    this.setState({data: d, lastSort: typeCheck})\n  }\n\n  render() {\n    return (\n      <div className=\"Panel\">\n      <ArrowButton toggle={this.props.hidePanel} style={{float: 'right'}}/>\n        <div className=\"panelHeader\">\n          <h5 id='title' className=\"tableInfo\">LIST OF COMMUNITIES</h5>\n          <h1 className=\"tableInfo\" style={{marginBottom: '5px', fontWeight:'900'}}>{this.state.data.communities.length}</h1>\n          <span id='subheader'><b>Communities</b> in <b>{this.state.data.name}</b></span>\n        </div>\n        <Table data={this.state.data} sort={this.sort} lastSort={this.state.lastSort}/>\n      </div>\n    );\n  }\n}\n\nexport default Panel;\n","import React, { Component } from 'react';\nimport Panel from './Panel';\nimport ArrowButton from './ArrowButton';\nimport './App.css';\n\nclass HomePage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      panelActive: false,\n    }\n  }\n\n  togglePanel = () => {\n  \tthis.setState({ panelActive: !this.state.panelActive });\n  }\n\n  render() {\n    return (\n      <div className=\"HomePage\">\n       {this.state.panelActive ? \n          <Panel hidePanel={this.togglePanel} />        \t\n       \t:\n       \t<React.Fragment>\n\t       \t<span className=\"homeText\">Show ATLAS panel</span>\n\t       \t<ArrowButton toggle={this.togglePanel} style={{float: 'left', marginTop: '3%'}}  open/>\n\t    </React.Fragment>\n       }\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n\n","import React, { Component } from 'react';\nimport HomePage from './HomePage';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HomePage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}